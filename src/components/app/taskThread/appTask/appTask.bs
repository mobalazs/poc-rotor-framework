' Rotor Framework Task
import "pkg:/source/libs/rotorFramework/RotorFrameworkTask.bs"

' Import common contants
import "../common/constants.bs"
import "pkg:/components/app/common/constants.bs"
import "pkg:/components/app/common/intentTypes.bs"

' Import Models and Reducers
import "app/appStore.bs"
import "app/appStoreReducer.bs"

import "user/userModel.bs"
import "user/userReducer.bs"

import "preloader/preloaderModel.bs"
import "preloader/preloaderReducer.bs"

import "homeContent/homeContentModel.bs"
import "homeContent/homeContentReducer.bs"

import "fetchPool/fetchPoolModel.bs"
import "fetchPool/fetchPoolReducer.bs"

sub init()
    m.top.functionName = "task"
    m.appFw = new Rotor.FrameworkTask({
        tasks: ["SleepTask"] ' optional
    })
end sub

sub task()

    ' * CREATE DISPATCHERS (Owned by this Task)

    ' Fetch pool
    fetchPoolModel = new Models.FetchPoolModel()
    fetchPoolReducer = new Reducers.FetchPoolReducer()
    Rotor.createDispatcher("fetchPool", fetchPoolModel, fetchPoolReducer)

    ' App logic
    appStore = new Models.AppStore()
    appStoreReducer = new Reducers.AppStoreReducer()
    Rotor.createDispatcher("appStore", appStore, appStoreReducer)

    ' User logic
    userModel = new Models.UserModel()
    userReducer = new Reducers.userReducer()
    Rotor.createDispatcher("user", userModel, userReducer)

    ' Preloader logic
    preloadModel = new Models.PreloaderModel()
    preloadReducer = new Reducers.PreloaderReducer()
    Rotor.createDispatcher("preloader", preloadModel, preloadReducer)

    ' Home content reader
    HomeContentModel = new Models.HomeContentModel()
    HomeContentReducer = new Reducers.HomeContentReducer()
    Rotor.createDispatcher("homeContent", HomeContentModel, HomeContentReducer)

    m.appFw.sync() ' main loop of multi-thread MVI
end sub
