
' Framework
import "pkg:/source/libs/rotorFramework/RotorFramework.bs"

' Assets
import "pkg:/assets/generated/bsTheme.bs"
import "pkg:/assets/generated/aaTranslation.brs"

' Constants and IntentTypes
import "pkg:/components/app/common/constants.bs"
import "pkg:/components/app/common/intentTypes.bs"

' ViewModel
import "../viewModels/loadingScreen/loadingScreen.bs"
import "../viewModels/dialog/dialog.bs"


sub init()
    m.roDeviceInfo = CreateObject("roDeviceInfo")
end sub



sub initApplication(payload = {} as object)

    m.appFw = new Rotor.Framework({
        tasks: ["AppTask"],
        onTaskReady: onTaskReady, ' optional
        debug: {
            autoSetNodeId: true ' If true, you can find nodes in RALE much easier. (Available only in debug mode.)
        }
    })

    m.appFw.render([
        {
            id: "loadingScreen",
            viewModel: ViewModels.LoadingScreen
        }, {
            id: "dialog",
            viewModel: ViewModels.Dialog
        }
    ])

    ' m.appFw.render({
    '     nodeType: "Rectangle",
    '     fields: {
    '         width: 250,
    '         height: 50,
    '         translation: [90, 60],
    '         color: "0x3E6641FF"
    '     },
    '     children: {
    '         nodeType: "Label",
    '         fields: {
    '             text: "Hello World!",
    '             horizAlign: "center",
    '             vertAlign: "center",
    '             width: 250,
    '             height: 50
    '         }
    '     }
    ' })


end sub


' Below optional callback function can be provided to be notified when the tasks are ready.
sub onTaskReady()
    ' Get user's theme and language preference
    m.userDispatcher = m.appFw.getDispatcher("user")
    userState = m.userDispatcher.getState()

    ' This is as simple as it seems. widgets and plugins will be able to access this assocarray
    m.appFw.i18nService.setL10n(get_aaTranslation()[userState.personalization.locale])
end sub



function onKeyEvent(key as string, press as boolean) as boolean
    result = m.appFw.plugins.focus.onKeyEventHandler(key, press)

    if press = true

        if result.handled = true

            if result.isSelected = true
                ' additional handler
            end if
            return result.handled

        else
            return true
        end if

    end if
    return false
end function


sub destroyApplication(payload as object)
    m.appFw.destroy()
end sub
